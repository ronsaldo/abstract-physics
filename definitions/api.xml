<api name="Abstract Physics" headerFile="aphy.h" constantPrefix="APHY_" typePrefix="aphy_" functionPrefix="aphy" >
<bindings>
    <language name="C">
        <property key="headerFile" value="aphy.h" />
        <property key="constantPrefix" value="APHY_" />
        <property key="typePrefix" value="aphy_" />
        <property key="functionPrefix" value="aphy" />
        <property key="headerInclude" value="&lt;APHY/aphy.h&gt;" />
        <property key="icdIncludeFile" value="aphy_icd.10.inc" />
    </language>

    <language name="C++">
        <property key="headerFile" value="aphy.hpp" />
    </language>

    <language name="Pharo">
        <property key="namespacePrefix" value="APHY" />
        <property key="package" value="AbstractPhysics-Generated" />
    </language>
</bindings>
<version name="1.0">
    <types>
        <typedef name="byte" ctype="unsigned char" />
        <typedef name="sbyte" ctype="signed char" />
        <typedef name="short" ctype="signed short" />
        <typedef name="ushort" ctype="unsigned short" />
        <typedef name="int" ctype="signed int" />
        <typedef name="uint" ctype="unsigned int" />
        <typedef name="pointer" ctype="void*" />
        <typedef name="size" ctype="unsigned int" />
        <typedef name="enum" ctype="int" />
        <typedef name="bool" ctype="int" />

        <typedef name="scalar" ctype="float" />

        <typedef name="bitfield" ctype="unsigned int" />

        <typedef name="cstring" ctype="const char*" />
        <typedef name="string" ctype="const char*" />
        <typedef name="string_length" ctype="int" />

        <typedef name="cstring_buffer" ctype="char*" />
        <typedef name="string_buffer" ctype="char*" />
    </types>

	<structs>
        <struct name="vector3">
            <field name="x" type="scalar" />
            <field name="y" type="scalar" />
            <field name="z" type="scalar" />
            <field name="pad" type="scalar" />
        </struct>

        <struct name="quaternion">
            <field name="x" type="scalar" />
            <field name="y" type="scalar" />
            <field name="z" type="scalar" />
            <field name="w" type="scalar" />
        </struct>

        <struct name="matrix3x3">
            <field name="firstRow" type="vector3" />
            <field name="secondRow" type="vector3" />
            <field name="thirdRow" type="vector3" />
        </struct>

        <struct name="transform">
            <field name="rotation" type="matrix3x3" />
            <field name="origin" type="vector3" />
        </struct>
	</structs>

    <constants>
        <enum name="error">
            <constant name="Ok" value="0" />
            <constant name="Error" value="-1" />
            <constant name="NullPointer" value="-2" />
            <constant name="InvalidOperation" value="-3" />
            <constant name="InvalidParameter" value="-4" />
            <constant name="OutOfBounds" value="-5" />
            <constant name="Unsupported" value="-6" />
            <constant name="Unimplemented" value="-7" />
        </enum>

        <enum name="axis">
            <constant name="AxisX" value="0" />
            <constant name="AxisY" value="1" />
            <constant name="AxisZ" value="2" />
        </enum>

        <enum name="scalar_type">
            <constant name="ScalarTypeUChar" value="0" />
            <constant name="ScalarTypeShort" value="1" />
            <constant name="ScalarTypeFloat" value="2" />
        </enum>

        <enum name="debug_draw_opcode">
            <constant name="DebugDrawOpNop" value="0" />
            <constant name="DebugDrawOpLine" value="1" />
            <constant name="DebugDrawOpLineGradient" value="2" />
            <constant name="DebugDrawOpTriangleFlat" value="3" />
            <constant name="DebugDrawOpTriangleGradient" value="4" />
            <constant name="DebugDrawOpTriangleLighted" value="5" />
            <constant name="DebugDrawOpContactPoint" value="6" />
            <constant name="DebugDrawOpErrorWarning" value="7" />
            <constant name="DebugDrawOp3DText" value="8" />
        </enum>
    </constants>

    <globals>
        <function name="getEngines" cname="GetEngines" returnType="error" category="engine">
            <arg name="numengines" type="size" />
            <arg name="engines" type="engine**" arrayReturn="true"/>
            <arg name="ret_numengines" type="size*" />
        </function>
    </globals>

    <interfaces>
        <interface name="engine">
            <method name="addReference" cname="AddEngineReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseEngine" returnType="error">
            </method>

            <method name="getName" cname="GetEngineName" returnType="cstring">
            </method>

            <method name="getVersion" cname="GetEngineVersion" returnType="int">
            </method>

            <method name="createDefaultCollisionConfiguration" cname="CreateDefaultCollisionConfiguration" returnType="collision_configuration*">
            </method>

            <method name="createDefaultCollisionDispatcher" cname="CreateDefaultCollisionDispatcher" returnType="collision_dispatcher*">
                <arg name="collision_configuration" type="collision_configuration*" />
            </method>

            <method name="createDefaultBroadphase" cname="CreateDefaultBroadphase" returnType="broadphase*">
            </method>

            <method name="createDefaultConstraintSolver" cname="CreateDefaultConstraintSolver" returnType="constraint_solver*">
            </method>

            <method name="createDefaultMotionState" cname="CreateDefaultMotionStte" returnType="motion_state*">
            </method>

            <method name="createDynamicsWorld" cname="CreateDynamicsWorld" returnType="world*">
                <arg name="collision_dispatcher" type="collision_dispatcher*" />
                <arg name="broadphase" type="broadphase*" />
                <arg name="constraint_solver" type="constraint_solver*" />
                <arg name="collision_configuration" type="collision_configuration*" />
            </method>

            <method name="createBoxShape" cname="CreateBoxShape" returnType="collision_shape*">
                <arg name="half_width" type="scalar" />
                <arg name="half_height" type="scalar" />
                <arg name="half_depth" type="scalar" />
            </method>

            <method name="createCylinderX" cname="CreateCylinderX" returnType="collision_shape*">
                <arg name="half_width" type="scalar" />
                <arg name="half_height" type="scalar" />
                <arg name="half_depth" type="scalar" />
            </method>

            <method name="createCylinderY" cname="CreateCylinderY" returnType="collision_shape*">
                <arg name="half_width" type="scalar" />
                <arg name="half_height" type="scalar" />
                <arg name="half_depth" type="scalar" />
            </method>

            <method name="createCylinderZ" cname="CreateCylinderZ" returnType="collision_shape*">
                <arg name="half_width" type="scalar" />
                <arg name="half_height" type="scalar" />
                <arg name="half_depth" type="scalar" />
            </method>

            <method name="createConvexHullShape" cname="CreateConvexHullShape" returnType="collision_shape*">
                <arg name="coordinates" type="scalar*" />
                <arg name="num_points" type="size" />
                <arg name="stride" type="size" />
            </method>

            <method name="createCapsuleShapeX" cname="CreateCapsuleShapeX" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createCapsuleShapeY" cname="CreateCapsuleShapeY" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createCapsuleShapeZ" cname="CreateCapsuleShapeZ" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createCompoundShape" cname="CreateCompoundShape" returnType="collision_shape*">
            </method>

            <method name="createConeX" cname="CreateConeX" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createConeY" cname="CreateConeY" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createConeZ" cname="CreateConeZ" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
                <arg name="height" type="scalar" />
            </method>

            <method name="createEmptyShape" cname="CreateEmptyShape" returnType="collision_shape*">
            </method>

            <method name="createHeightfieldTerrainShape" cname="CreateHeightfieldTerrainShape" returnType="collision_shape*">
                <arg name="height_stick_width" type="int" />
                <arg name="height_stick_length" type="int" />
                <arg name="heightfield_data" type="pointer" />
                <arg name="height_scale" type="scalar" />
                <arg name="min_height" type="scalar" />
                <arg name="max_height" type="scalar" />
                <arg name="up_axis" type="axis" />
                <arg name="height_data_type" type="scalar_type" />
                <arg name="flip_quad_edges" type="bool" />
                <arg name="local_scale_x" type="scalar" />
                <arg name="local_scale_y" type="scalar" />
                <arg name="local_scale_z" type="scalar" />
            </method>

            <method name="createSphere" cname="CreateSphere" returnType="collision_shape*">
                <arg name="radius" type="scalar" />
            </method>

            <method name="createSimpleRigidBody" cname="CreateSimpleRigidBody" returnType="collision_object*">
                <arg name="mass" type="scalar" />
                <arg name="motion_state" type="motion_state*" />
                <arg name="collision_shape" type="collision_shape*" />
                <arg name="local_inertia" type="vector3" />
            </method>

            <method name="createSimpleRigidBodyFrom" cname="CreateSimpleRigidBodyFrom" returnType="collision_object*">
                <arg name="mass" type="scalar" />
                <arg name="motion_state" type="motion_state*" />
                <arg name="collision_shape" type="collision_shape*" />
                <arg name="local_inertia" type="vector3*" />
            </method>

            <method name="createGhostObject" cname="CreateGhostObject" returnType="collision_object*">
            </method>

            <method name="createPairCachingGhostObject" cname="CreatePairCachingGhostObject" returnType="collision_object*">
            </method>

            <method name="createKinematicCharacterController" cname="CreateKinematicCharacterController" returnType="character_controller*">
                <arg name="ghost_object" type="collision_object*" />
                <arg name="convex_shape" type="collision_shape*" />
                <arg name="step_height" type="scalar" />
                <arg name="up_axis" type="axis" />
            </method>

        </interface>

        <interface name="collision_configuration">
            <method name="addReference" cname="AddCollisionConfigurationReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCollisionConfiguration" returnType="error">
            </method>
        </interface>

        <interface name="collision_dispatcher">
            <method name="addReference" cname="AddCollisionDispatcherReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCollisionDispatcher" returnType="error">
            </method>
        </interface>

        <interface name="broadphase">
            <method name="addReference" cname="AddBroadphaseReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseBroadphaseReference" returnType="error">
            </method>
        </interface>

        <interface name="constraint_solver">
            <method name="addReference" cname="AddConstraintSolverReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseConstraintSolverReference" returnType="error">
            </method>
        </interface>

        <interface name="world">
            <method name="addReference" cname="AddWorldReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseWorldReference" returnType="error">
            </method>

            <method name="getNumberOfCollisionObject" cname="GetNumberOfCollisionObject" returnType="uint">
            </method>

            <method name="getNumberOfConstraints" cname="GetNumberOfConstraints" returnType="uint">
            </method>

            <method name="addCollisionObject" cname="AddCollisionObject" returnType="error">
                <arg name="object" type="collision_object*" />
                <arg name="collision_filter_group" type="short" />
                <arg name="collision_filter_mask" type="short" />
            </method>

            <method name="removeCollisionObject" cname="RemoveCollisionObject" returnType="error">
                <arg name="object" type="collision_object*" />
            </method>

            <method name="addRigidBody" cname="AddRigidBody" returnType="error">
                <arg name="object" type="collision_object*" />
            </method>

            <method name="removeRigidBody" cname="RemoveRigidBody" returnType="error">
                <arg name="object" type="collision_object*" />
            </method>

            <method name="addCharacterController" cname="AddCharacterController" returnType="error">
                <arg name="character" type="character_controller*" />
            </method>

            <method name="removeCharacterController" cname="RemoveCharacterController" returnType="error">
                <arg name="character" type="character_controller*" />
            </method>

            <method name="addRigidBodyWithFilter" cname="AddRigidBodyWithFilter" returnType="error">
                <arg name="object" type="collision_object*" />
                <arg name="collision_filter_group" type="short" />
                <arg name="collision_filter_mask" type="short" />
            </method>

            <method name="stepSimulation" cname="StepSimulation" returnType="error">
                <arg name="time_step" type="scalar" />
                <arg name="max_sub_steps" type="int" />
                <arg name="fixed_time_step" type="scalar" />
            </method>

            <method name="setGravity" cname="SetGravity" returnType="error">
                <arg name="x" type="scalar" />
                <arg name="y" type="scalar" />
                <arg name="z" type="scalar" />
            </method>

            <method name="encodeDebugDrawing" cname="EncodeDebugDrawing" returnType="size">
            </method>

            <method name="getDebugDrawingData" cname="GetDebugDrawingData" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="pointer" />
            </method>

        </interface>

        <interface name="character_controller">
            <method name="addReference" cname="AddCharacterControllerReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCharacterControllerReference" returnType="error">
            </method>

            <method name="setWalkDirection" cname="SetCharacterControllerWalkDirection" returnType="error">
                <arg name="direction" type="vector3" />
            </method>

            <method name="setWalkDirectionFrom" cname="SetCharacterControllerWalkDirectionFrom" returnType="error">
                <arg name="direction" type="vector3*" />
            </method>

            <method name="setVelocityForTimeInterval" cname="SetCharacterControllerVelocityForTimeInterval" returnType="error">
                <arg name="velocity" type="vector3" />
                <arg name="time_interval" type="scalar" />
            </method>

            <method name="setVelocityForTimeIntervalFrom" cname="SetCharacterControllerVelocityForTimeIntervalFrom" returnType="error">
                <arg name="velocity" type="vector3*" />
                <arg name="time_interval" type="scalar" />
            </method>

            <method name="warp" cname="WarpCharacterController" returnType="error">
                <arg name="origin" type="vector3" />
            </method>

            <method name="warpWithOriginFrom" cname="WarpCharacterControllerWithOriginFrom" returnType="error">
                <arg name="origin" type="vector3*" />
            </method>

            <method name="canJump" cname="CanCharacterControllerJump" returnType="bool">
            </method>

            <method name="jump" cname="CharacterControllerJump" returnType="error">
            </method>

            <method name="isOnGround" cname="IsCharacterControllerOnGround" returnType="bool">
            </method>

            <method name="setMaxJumpHeight" cname="SetCharacterMaxJumpHeight" returnType="error">
                <arg name="height" type="scalar" />
            </method>

            <method name="setJumpSpeed" cname="SetCharacterJumpSpeed" returnType="error">
                <arg name="speed" type="scalar" />
            </method>

            <method name="setGravity" cname="SetCharacterGravity" returnType="error">
                <arg name="gravity" type="scalar" />
            </method>

        </interface>

        <interface name="collision_object">
            <method name="addReference" cname="AddCollisionObjectReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCollisionObjectReference" returnType="error">
            </method>

            <method name="getTransform" cname="GetCollisionObjectTransform" returnType="transform">
            </method>

            <method name="getTransformInto" cname="GetCollisionObjectTransformInto" returnType="error">
                <arg name="result" type="transform*" />
            </method>

            <method name="getTranslation" cname="GetCollisionObjectTranslation" returnType="vector3">
            </method>

            <method name="getTranslationInto" cname="GetCollisionObjectTranslationInto" returnType="error">
                <arg name="result" type="vector3*" />
            </method>

            <method name="getMatrix" cname="GetCollisionObjectMatrix" returnType="matrix3x3">
            </method>

            <method name="getMatrixInto" cname="GetCollisionObjectMatrixInto" returnType="error">
                <arg name="result" type="matrix3x3*" />
            </method>

            <method name="getQuaternion" cname="GetCollisionObjectQuaternion" returnType="quaternion">
            </method>

            <method name="getQuaternionInto" cname="GetCollisionObjectQuaternionInto" returnType="error">
                <arg name="result" type="quaternion*" />
            </method>

            <method name="setTransform" cname="SetCollisionObjectTransform" returnType="error">
                <arg name="value" type="transform" />
            </method>

            <method name="setTransformFrom" cname="SetCollisionObjectTransformFrom" returnType="error">
                <arg name="value" type="transform*" />
            </method>

            <method name="setTranslation" cname="SetCollisionObjectTranslation" returnType="error">
                <arg name="value" type="vector3" />
            </method>

            <method name="setTranslationFrom" cname="SetCollisionObjectTranslationFrom" returnType="error">
                <arg name="value" type="vector3*" />
            </method>

            <method name="setMatrix" cname="SetCollisionObjectMatrix" returnType="error">
                <arg name="value" type="matrix3x3" />
            </method>

            <method name="setMatrixFrom" cname="SetCollisionObjectMatrixFrom" returnType="error">
                <arg name="value" type="matrix3x3*" />
            </method>

            <method name="setQuaternion" cname="SetCollisionObjectQuaternion" returnType="error">
                <arg name="value" type="quaternion" />
            </method>

            <method name="setQuaternion" cname="SetCollisionObjectQuaternionFrom" returnType="error">
                <arg name="value" type="quaternion*" />
            </method>

            <method name="setCollisionShape" cname="SetCollisionObjectShape" returnType="error">
                <arg name="shape" type="collision_shape*" />
            </method>
        </interface>

        <interface name="collision_shape">
            <method name="addReference" cname="AddCollisionShapeReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCollisionShapeReference" returnType="error">
            </method>

            <method name="setMargin" cname="SetShapeMargin" returnType="error">
                <arg name="margin" type="scalar" />
            </method>

            <method name="getMargin" cname="GetShapeMargin" returnType="scalar">
            </method>

            <method name="computeLocalInertia" cname="ComputeLocalInertia" returnType="vector3">
                <arg name="mass" type="scalar" />">
            </method>

            <method name="computeLocalInertiaInto" cname="ComputeLocalInertiaInto" returnType="error">
                <arg name="mass" type="scalar" />">
                <arg name="result" type="vector3*" />
            </method>

            <method name="addLocalShapeWithTransform" cname="AddLocalShapeWithTransform" returnType="error">
                <arg name="shape" type="collision_shape*" />
                <arg name="transform" type="transform" />
            </method>

            <method name="addLocalShapeWithTransformFrom" cname="AddLocalShapeWithTransformFrom" returnType="error">
                <arg name="shape" type="collision_shape*" />
                <arg name="transform" type="transform*" />
            </method>

        </interface>

        <interface name="motion_state">
            <method name="addReference" cname="AddMotionStateReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseMotionStateReference" returnType="error">
            </method>

            <method name="getTransform" cname="GetMotionStateTransform" returnType="transform">
            </method>

            <method name="getTransformInto" cname="GetMotionStateTransformInto" returnType="error">
                <arg name="result" type="transform*" />
            </method>

            <method name="getTranslation" cname="GetMotionStateTranslation" returnType="vector3">
            </method>

            <method name="getTranslationInto" cname="GetMotionStateTranslationInto" returnType="error">
                <arg name="result" type="vector3*" />
            </method>

            <method name="getMatrix" cname="GetMotionStateMatrix" returnType="matrix3x3">
            </method>

            <method name="getMatrixInto" cname="GetMotionStateMatrixInto" returnType="error">
                <arg name="result" type="matrix3x3*" />
            </method>

            <method name="getQuaternion" cname="GetMotionStateQuaternion" returnType="quaternion">
            </method>

            <method name="getQuaternionInto" cname="GetMotionStateQuaternionInto" returnType="error">
                <arg name="result" type="quaternion*" />
            </method>

            <method name="setTransform" cname="SetMotionStateTransform" returnType="error">
                <arg name="value" type="transform" />
            </method>

            <method name="setTransformFrom" cname="SetMotionStateTransformFrom" returnType="error">
                <arg name="value" type="transform*" />
            </method>

            <method name="setTranslation" cname="SetMotionStateTranslation" returnType="error">
                <arg name="value" type="vector3" />
            </method>

            <method name="setTranslationFrom" cname="SetMotionStateTranslationFrom" returnType="error">
                <arg name="value" type="vector3*" />
            </method>

            <method name="setMatrix" cname="SetMotionStateMatrix" returnType="error">
                <arg name="value" type="matrix3x3" />
            </method>

            <method name="setMatrixFrom" cname="SetMotionStateMatrixFrom" returnType="error">
                <arg name="value" type="matrix3x3*" />
            </method>

            <method name="setQuaternion" cname="SetMotionStateQuaternion" returnType="error">
                <arg name="value" type="quaternion" />
            </method>

            <method name="setQuaternionFrom" cname="SetMotionStateQuaternionFrom" returnType="error">
                <arg name="value" type="quaternion*" />
            </method>
        </interface>
    </interfaces>
</version>
</api>
